
import os
from binance.client import Client
from binance.enums import *
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("BINANCE_API_KEY")
API_SECRET = os.getenv("BINANCE_API_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
if not all([API_KEY, API_SECRET, TELEGRAM_BOT_TOKEN]):
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API-–∫–ª—é—á–∏ –∏–ª–∏ —Ç–æ–∫–µ–Ω—ã!")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Binance
client = Client(API_KEY, API_SECRET)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã. üöÄ")

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
async def send_signal(signal):
    try:
        caption = (
            f"üìä –°–∏–≥–Ω–∞–ª –Ω–∞ —Å–¥–µ–ª–∫—É:
"
            f"–ú–æ–Ω–µ—Ç–∞: {signal['symbol']}
"
            f"–í—Ö–æ–¥: {signal['entry']:.4f}
"
            f"TP (—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç): {signal['tp']:.4f}
"
            f"SL (—Å—Ç–æ–ø-–ª–æ—Å—Å): {signal['sl']:.4f}
"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {signal['probability']}%
"
            f"–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {signal['time_to_hold']}
"
        )
        # –ó–¥–µ—Å—å —É–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ message.chat.id
        chat_id = 123456789  
        await bot.send_photo(chat_id=chat_id, photo=signal['image_url'], caption=caption)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == "__main__":
    try:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
