
from binance.client import Client
from aiogram import Bot, Dispatcher, executor, types
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import asyncio
import random
import os
import matplotlib.pyplot as plt

# –í–∞—à–∏ –∫–ª—é—á–∏
TELEGRAM_TOKEN = '7829810175:AAGibSddU5aZtg16aaegSiS0RJCPJCzMjsU'
BINANCE_API_KEY = 'eTfwfrRykWGu5K4ZlfrwU4OrhGdlYiacoZC1BFOV3plVzo8T3oaurzbkdCGat0A5'
BINANCE_SECRET_KEY = 'TlTHow6JYhSeihKgM0jJRxQvQRb9nDlOiwu3rkwG4xHyF4ow1EuFz5rlJlHTlKxv'

# –í–∞—à Telegram ID
CHAT_ID = 1847604577

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ RSI
def calculate_rsi(data, period=14):
    delta = data['close'].diff()
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)
    avg_gain = pd.Series(gain).rolling(window=period, min_periods=1).mean()
    avg_loss = pd.Series(loss).rolling(window=period, min_periods=1).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ MACD
def calculate_macd(data, short_period=12, long_period=26, signal_period=9):
    short_ema = data['close'].ewm(span=short_period, adjust=False).mean()
    long_ema = data['close'].ewm(span=long_period, adjust=False).mean()
    macd = short_ema - long_ema
    signal_line = macd.ewm(span=signal_period, adjust=False).mean()
    return macd, signal_line

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def create_chart(data, symbol):
    plt.figure(figsize=(10, 6))
    plt.plot(data['close'], label='–¶–µ–Ω–∞', color='blue')
    plt.title(f'{symbol} - –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã')
    plt.xlabel('–í—Ä–µ–º—è')
    plt.ylabel('–¶–µ–Ω–∞')
    plt.legend()
    plt.grid()
    chart_path = f"{symbol}_chart.png"
    plt.savefig(chart_path)
    plt.close()
    return chart_path

# –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
def analyze_market():
    signals = []
    tickers = client.get_all_tickers()

    for ticker in tickers:
        symbol = ticker['symbol']
        if not symbol.endswith('USDT'):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å USDT
            continue

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            klines = client.get_klines(symbol=symbol, interval='15m', limit=50)
            df = pd.DataFrame(klines, columns=[
                'time', 'open', 'high', 'low', 'close', 'volume', '_', '_', '_', '_', '_', '_'
            ])
            df['close'] = df['close'].astype(float)
            df['time'] = pd.to_datetime(df['time'], unit='ms')

            # –†–∞—Å—á—ë—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            df['rsi'] = calculate_rsi(df)
            df['macd'], df['signal_line'] = calculate_macd(df)

            # –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            rsi = df['rsi'].iloc[-1]
            macd = df['macd'].iloc[-1]
            signal_line = df['signal_line'].iloc[-1]
            close_price = df['close'].iloc[-1]

            # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            if rsi < 30 and macd > signal_line:
                take_profit = close_price * 1.03  # –¶–µ–ª—å: +3%
                stop_loss = close_price * 0.98  # –†–∏—Å–∫: -2%
                time_to_hold = "30 –º–∏–Ω—É—Ç" if random.randint(1, 100) < 80 else "1 —á–∞—Å"
                probability = random.randint(80, 95)

                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                chart_path = create_chart(df, symbol)

                signals.append(
                    {
                        'symbol': symbol,
                        'entry': close_price,
                        'tp': take_profit,
                        'sl': stop_loss,
                        'probability': probability,
                        'time_to_hold': time_to_hold,
                        'chart': chart_path,
                        'notify_time': datetime.now() + timedelta(minutes=random.randint(2, 5)),  # –ß–µ—Ä–µ–∑ 2‚Äì5 –º–∏–Ω—É—Ç
                    }
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}: {e}")

    return signals

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
async def send_signal_task():
    while True:
        signals = analyze_market()
        for signal in signals:
            now = datetime.now()
            if signal['notify_time'] <= now:
                with open(signal['chart'], 'rb') as photo:
                    await bot.send_photo(
                        chat_id=CHAT_ID,
                        photo=photo,
                        caption=(
                            f"üìä –°–∏–≥–Ω–∞–ª –Ω–∞ —Å–¥–µ–ª–∫—É:
"
                            f"–ú–æ–Ω–µ—Ç–∞: {signal['symbol']}
"
                            f"–í—Ö–æ–¥: {signal['entry']:.4f}
"
                            f"TP (—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç): {signal['tp']:.4f}
"
                            f"SL (—Å—Ç–æ–ø-–ª–æ—Å—Å): {signal['sl']:.4f}
"
                            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {signal['probability']}%
"
                            f"–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {signal['time_to_hold']}
"
                        )
                    )
                os.remove(signal['chart'])
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Å Binance. –°–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞ 2‚Äì5 –º–∏–Ω—É—Ç –¥–æ —Å–¥–µ–ª–∫–∏.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(send_signal_task())  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    executor.start_polling(dp, skip_updates=True)
